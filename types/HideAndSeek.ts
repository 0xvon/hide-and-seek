/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface HideAndSeekInterface extends utils.Interface {
  functions: {
    "currentProof()": FunctionFragment;
    "hider()": FunctionFragment;
    "joinGame()": FunctionFragment;
    "seeker()": FunctionFragment;
    "seekerMove(uint256,uint256)": FunctionFragment;
    "updateProof(bytes)": FunctionFragment;
    "verifier()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "currentProof"
      | "hider"
      | "joinGame"
      | "seeker"
      | "seekerMove"
      | "updateProof"
      | "verifier"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "currentProof",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hider", values?: undefined): string;
  encodeFunctionData(functionFragment: "joinGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "seeker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seekerMove",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProof",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "currentProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seeker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seekerMove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;

  events: {
    "Found(address)": EventFragment;
    "SeekerMoved(address,uint256,uint256)": EventFragment;
    "UpdatedProof(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Found"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeekerMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedProof"): EventFragment;
}

export interface FoundEventObject {
  seeker: string;
}
export type FoundEvent = TypedEvent<[string], FoundEventObject>;

export type FoundEventFilter = TypedEventFilter<FoundEvent>;

export interface SeekerMovedEventObject {
  seeker: string;
  seekerX: BigNumber;
  seekerY: BigNumber;
}
export type SeekerMovedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SeekerMovedEventObject
>;

export type SeekerMovedEventFilter = TypedEventFilter<SeekerMovedEvent>;

export interface UpdatedProofEventObject {
  hider: string;
  proof: string;
}
export type UpdatedProofEvent = TypedEvent<
  [string, string],
  UpdatedProofEventObject
>;

export type UpdatedProofEventFilter = TypedEventFilter<UpdatedProofEvent>;

export interface HideAndSeek extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HideAndSeekInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentProof(overrides?: CallOverrides): Promise<[string]>;

    hider(overrides?: CallOverrides): Promise<[string]>;

    joinGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seeker(overrides?: CallOverrides): Promise<[string]>;

    seekerMove(
      seekerX: PromiseOrValue<BigNumberish>,
      seekerY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProof(
      _proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifier(overrides?: CallOverrides): Promise<[string]>;
  };

  currentProof(overrides?: CallOverrides): Promise<string>;

  hider(overrides?: CallOverrides): Promise<string>;

  joinGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seeker(overrides?: CallOverrides): Promise<string>;

  seekerMove(
    seekerX: PromiseOrValue<BigNumberish>,
    seekerY: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProof(
    _proof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifier(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    currentProof(overrides?: CallOverrides): Promise<string>;

    hider(overrides?: CallOverrides): Promise<string>;

    joinGame(overrides?: CallOverrides): Promise<void>;

    seeker(overrides?: CallOverrides): Promise<string>;

    seekerMove(
      seekerX: PromiseOrValue<BigNumberish>,
      seekerY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProof(
      _proof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifier(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Found(address)"(seeker?: PromiseOrValue<string> | null): FoundEventFilter;
    Found(seeker?: PromiseOrValue<string> | null): FoundEventFilter;

    "SeekerMoved(address,uint256,uint256)"(
      seeker?: PromiseOrValue<string> | null,
      seekerX?: null,
      seekerY?: null
    ): SeekerMovedEventFilter;
    SeekerMoved(
      seeker?: PromiseOrValue<string> | null,
      seekerX?: null,
      seekerY?: null
    ): SeekerMovedEventFilter;

    "UpdatedProof(address,bytes)"(
      hider?: PromiseOrValue<string> | null,
      proof?: null
    ): UpdatedProofEventFilter;
    UpdatedProof(
      hider?: PromiseOrValue<string> | null,
      proof?: null
    ): UpdatedProofEventFilter;
  };

  estimateGas: {
    currentProof(overrides?: CallOverrides): Promise<BigNumber>;

    hider(overrides?: CallOverrides): Promise<BigNumber>;

    joinGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seeker(overrides?: CallOverrides): Promise<BigNumber>;

    seekerMove(
      seekerX: PromiseOrValue<BigNumberish>,
      seekerY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProof(
      _proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    currentProof(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seeker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seekerMove(
      seekerX: PromiseOrValue<BigNumberish>,
      seekerY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProof(
      _proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
