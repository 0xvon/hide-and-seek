/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { HideAndSeek, HideAndSeekInterface } from "../HideAndSeek";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seeker",
        type: "address",
      },
    ],
    name: "Found",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seeker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "seekerX",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "seekerY",
        type: "uint256",
      },
    ],
    name: "SeekerMoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "hider",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "UpdatedProof",
    type: "event",
  },
  {
    inputs: [],
    name: "currentProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "joinGame",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "seeker",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seekerX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "seekerY",
        type: "uint256",
      },
    ],
    name: "seekerMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
    ],
    name: "updateProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract Verifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001393380380620013938339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b611269806200012a6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806382964a561161005b57806382964a56146100da578063a99b9186146100f6578063d4f77b1c14610114578063f3ab7ea91461011e5761007d565b80632b7ac3f314610082578063441d4d79146100a057806346850d8c146100be575b600080fd5b61008a61013c565b60405161009791906108ec565b60405180910390f35b6100a8610160565b6040516100b59190610928565b60405180910390f35b6100d860048036038101906100d391906109b2565b610186565b005b6100f460048036038101906100ef9190610a35565b61029e565b005b6100fe610648565b60405161010b9190610b05565b60405180910390f35b61011c6106d6565b005b610126610847565b6040516101339190610928565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020d90610baa565b60405180910390fd5b818160039182610227929190610e06565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fcc6cbc71aca7c33354a5214ce5677ad38e90db195ef353594766c28b3a4b30ed8383604051610292929190610f12565b60405180910390a25050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032590610f82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690610fee565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166003848460405160240161040f939291906110a1565b6040516020818303038152906040527f5569909f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610499919061111b565b6000604051808303816000865af19150503d80600081146104d6576040519150601f19603f3d011682016040523d82523d6000602084013e6104db565b606091505b505090508061051f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105169061117e565b60405180910390fd5b80156105d05733600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ffaf499deb6973730595cb45514163513941791a444cd9abb2ad7c4f7b556a08e60405160405180910390a2610643565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7077795bc8245a776155ba48b71c8f2e035accf72a092dfc94714ecb3f79e4ea848460405161063a92919061119e565b60405180910390a25b505050565b6003805461065590610c33565b80601f016020809104026020016040519081016040528092919081815260200182805461068190610c33565b80156106ce5780601f106106a3576101008083540402835291602001916106ce565b820191906000526020600020905b8154815290600101906020018083116106b157829003601f168201915b505050505081565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107725733600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610845565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa90611213565b60405180910390fd5b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108b26108ad6108a88461086d565b61088d565b61086d565b9050919050565b60006108c482610897565b9050919050565b60006108d6826108b9565b9050919050565b6108e6816108cb565b82525050565b600060208201905061090160008301846108dd565b92915050565b60006109128261086d565b9050919050565b61092281610907565b82525050565b600060208201905061093d6000830184610919565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126109725761097161094d565b5b8235905067ffffffffffffffff81111561098f5761098e610952565b5b6020830191508360018202830111156109ab576109aa610957565b5b9250929050565b600080602083850312156109c9576109c8610943565b5b600083013567ffffffffffffffff8111156109e7576109e6610948565b5b6109f38582860161095c565b92509250509250929050565b6000819050919050565b610a12816109ff565b8114610a1d57600080fd5b50565b600081359050610a2f81610a09565b92915050565b60008060408385031215610a4c57610a4b610943565b5b6000610a5a85828601610a20565b9250506020610a6b85828601610a20565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610aaf578082015181840152602081019050610a94565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ad782610a75565b610ae18185610a80565b9350610af1818560208601610a91565b610afa81610abb565b840191505092915050565b60006020820190508181036000830152610b1f8184610acc565b905092915050565b600082825260208201905092915050565b7f4f6e6c79207468652068696465722063616e207570646174652074686520707260008201527f6f6f660000000000000000000000000000000000000000000000000000000000602082015250565b6000610b94602383610b27565b9150610b9f82610b38565b604082019050919050565b60006020820190508181036000830152610bc381610b87565b9050919050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c4b57607f821691505b602082108103610c5e57610c5d610c04565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610cc67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c89565b610cd08683610c89565b95508019841693508086168417925050509392505050565b6000610d03610cfe610cf9846109ff565b61088d565b6109ff565b9050919050565b6000819050919050565b610d1d83610ce8565b610d31610d2982610d0a565b848454610c96565b825550505050565b600090565b610d46610d39565b610d51818484610d14565b505050565b5b81811015610d7557610d6a600082610d3e565b600181019050610d57565b5050565b601f821115610dba57610d8b81610c64565b610d9484610c79565b81016020851015610da3578190505b610db7610daf85610c79565b830182610d56565b50505b505050565b600082821c905092915050565b6000610ddd60001984600802610dbf565b1980831691505092915050565b6000610df68383610dcc565b9150826002028217905092915050565b610e108383610bca565b67ffffffffffffffff811115610e2957610e28610bd5565b5b610e338254610c33565b610e3e828285610d79565b6000601f831160018114610e6d5760008415610e5b578287013590505b610e658582610dea565b865550610ecd565b601f198416610e7b86610c64565b60005b82811015610ea357848901358255600182019150602085019450602081019050610e7e565b86831015610ec05784890135610ebc601f891682610dcc565b8355505b6001600288020188555050505b50505050505050565b82818337600083830152505050565b6000610ef18385610a80565b9350610efe838584610ed6565b610f0783610abb565b840190509392505050565b60006020820190508181036000830152610f2d818486610ee5565b90509392505050565b7f4f6e6c7920746865207365656b65722063616e206d6f76650000000000000000600082015250565b6000610f6c601883610b27565b9150610f7782610f36565b602082019050919050565b60006020820190508181036000830152610f9b81610f5f565b9050919050565b7f5468657265206973206e6f206869646572206e6f770000000000000000000000600082015250565b6000610fd8601583610b27565b9150610fe382610fa2565b602082019050919050565b6000602082019050818103600083015261100781610fcb565b9050919050565b6000815461101b81610c33565b6110258186610a80565b94506001821660008114611040576001811461105657611089565b60ff198316865281151560200286019350611089565b61105f85610c64565b60005b8381101561108157815481890152600182019150602081019050611062565b808801955050505b50505092915050565b61109b816109ff565b82525050565b600060608201905081810360008301526110bb818661100e565b90506110ca6020830185611092565b6110d76040830184611092565b949350505050565b600081905092915050565b60006110f582610a75565b6110ff81856110df565b935061110f818560208601610a91565b80840191505092915050565b600061112782846110ea565b915081905092915050565b7f4661696c656420746f20766572696679207468652070726f6f66000000000000600082015250565b6000611168601a83610b27565b915061117382611132565b602082019050919050565b600060208201905081810360008301526111978161115b565b9050919050565b60006040820190506111b36000830185611092565b6111c06020830184611092565b9392505050565b7f5365656b65722068617320616c7265616479206a6f696e656400000000000000600082015250565b60006111fd601983610b27565b9150611208826111c7565b602082019050919050565b6000602082019050818103600083015261122c816111f0565b905091905056fea264697066735822122079be12fe43a1b3c62f80337703185e63a94c4181112675b66c8e6627d0112f6164736f6c63430008120033";

type HideAndSeekConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HideAndSeekConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HideAndSeek__factory extends ContractFactory {
  constructor(...args: HideAndSeekConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<HideAndSeek> {
    return super.deploy(_verifier, overrides || {}) as Promise<HideAndSeek>;
  }
  override getDeployTransaction(
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_verifier, overrides || {});
  }
  override attach(address: string): HideAndSeek {
    return super.attach(address) as HideAndSeek;
  }
  override connect(signer: Signer): HideAndSeek__factory {
    return super.connect(signer) as HideAndSeek__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HideAndSeekInterface {
    return new utils.Interface(_abi) as HideAndSeekInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HideAndSeek {
    return new Contract(address, _abi, signerOrProvider) as HideAndSeek;
  }
}
